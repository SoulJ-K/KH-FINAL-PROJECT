<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">
	
	<select id="getListCount" resultType="_int">
		select count(*)
		from blist
		where f_status='Y' and category=#{cate}
	</select>
	
	<select id="selectList" resultType="Board">
		<![CDATA[
		select distinct un.fno, FTYPE, un.PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, li
		from(select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hy' li
	     	 from blist
	     	 where fno in (select fno2
						   from heart
						   where user_id_ht=#{id})   
			  union
			  select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hn' li
			  from blist
			  where fno not in (select fno2   
								from heart
								where user_id_ht=#{id}) ) un
		left join choose c on (un.fno = c.fno)
		where f_status='Y' and category=#{cate} and to_date(odeadline) > sysdate
		order by rank desc
		]]>
	</select>
	
	<update id="selectListfno" >
	<if test="odeadline != null">
		<![CDATA[
			update board
			set F_STATUS = 'N'
			where board.fno in (
		        select board.fno
		        from board
		        join choose on (board.fno=choose.fno)
	       		where to_date(odeadline) < sysdate)
		]]>
	</if>
	<if test="odeadline==null">
		update board
		set F_STATUS = 'Y'
		where board.fno in (
			select board.fno
	        from board
	        join choose on (board.fno=choose.fno)
       		where odeadline is null)
		        
	</if>
	</update>
	
	
	
	<select id="selectLtList" parameterType="map" resultType="Board">
		<![CDATA[
		select distinct un.fno, FTYPE, un.PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, li
		from(select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hy' li
	     	 from blist
	     	 where fno in (select fno2
						   from heart
						   where user_id_ht=#{id})   
			  union
			  select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hn' li
			  from blist
			  where fno not in (select fno2   
								from heart
								where user_id_ht=#{id}) ) un
		left join choose c on (un.fno = c.fno)
		where f_status='Y' and category=#{cate} and to_date(odeadline) > sysdate
		order by f_create_date desc
		]]>
	</select>
	
	<select id="selectHtList" parameterType="map" resultType="Board">
		<![CDATA[
		select distinct un.fno, FTYPE, un.PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, li
		from(select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hy' li
	     	 from blist
	     	 where fno in (select fno2
						   from heart
						   where user_id_ht=#{id})   
			  union
			  select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hn' li
			  from blist
			  where fno not in (select fno2   
								from heart
								where user_id_ht=#{id}) ) un
		left join choose c on (un.fno = c.fno)
		where f_status='Y' and category=#{cate} and to_date(odeadline) > sysdate
		order by rank desc
		]]>
	</select>
	
	<insert id="insertBoard">
		insert into board
		values(SEQ_BOARD.nextval, #{ftype}, #{price}, #{small_title}, #{ftitle}, #{category}, #{location}, #{lat}, #{lon}, 
				#{fcontain}, #{fncontain}, #{fcalendar}, #{fmaterials}, #{fminfo}, #{fprecaution}, #{user_id},
				 default, default, default, sysdate, default, #{originalFileName}, #{renameFileName}, #{introduce}, #{maxMember})
	</insert>
	
	<insert id="insertBoardOption">
		insert into choose
		values(SEQ_CHOOSE.nextval, #{oname}, #{price}, #{ocount}, SEQ_BOARD.currval, #{odeadline}, default)
	</insert>
	
	<update id="updateBoard">
		update board
 		set FTYPE= #{ftype}, PRICE=#{price}, SMALL_TITLE=#{small_title}, FTITLE=#{ftitle}, CATEGORY=#{category}, LOCATION=#{location}, LAT=#{lat}, LON=#{lon}, 
			FCONTAIN=#{fcontain}, FNCONTAIN=#{fncontain}, FCALENDAR=#{fcalendar}, FMATERIALS=#{fmaterials}, FMINFO=#{fminfo}, FPRECAUTION=#{fprecaution}, 
			ORIGINALFILENAME=#{originalFileName},RENAMEFILENAME=#{renameFileName}, INTRODUCE=#{introduce}, MAXMEMBER=#{maxMember})
 		where fno = #{fno}	
	</update>
	
	<update id="updateBoardOption">
		update choose
		set ONAME=#{oname}, PRICE=#{price}, OCOUNT=#{ocount}, ODEADLINE=#{odeadline}
		where fno = #{fno}	
	</update>
	
	<update id="deleteBoard">
		update board
		set F_STATUS = 'N'
		where fno = #{fno}	
	</update>
	
	<update id="deleteBoardOption">
		update choose
		set o_status = 'N'
		where fno=#{fno}
	</update
	>
	
	<select id="selectBoard" resultType="Board">
		select *
		from board
		where fno=#{fno} and f_status='Y'
	</select>
	
	<select id="getSearchListCount" resultType="_int">
		select count(*)
		from blist
		where f_status='Y' and category=#{cate} and 
		<choose>
			<when test='sc.endPrice == 300000'>
				<![CDATA[ 
					price>=#{sc.startPrice}
				 ]]>
			 </when>
			 <otherwise>
			 	<![CDATA[ 
					price>=#{sc.startPrice} and price<=#{sc.endPrice}
				 ]]>
			 </otherwise>
		</choose>
		<if test='ad2 != null'>
			and ad1=#{ad1} and ad2=#{ad2} 
		</if> 
	</select>
	
	<select id="selectSearchList" parameterType="map" resultType="Board">
		select distinct un.fno, FTYPE, un.PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, li
		from(select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hy' li
		     from blist
		     where fno in (select fno2
		                   from heart
		                   where user_id_ht=#{id})   
		    union
		    select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hn' li
		    from blist
		    where fno not in (select fno2
		                      from heart
		                      where user_id_ht=#{id}) ) un
		join choose c on (un.fno = c.fno)
		where f_status='Y' and category=#{cate} and to_date(ODEADLINE) > sysdate and           
		<choose>
			<when test='sc.endPrice == 300000'>
				<![CDATA[ 
					price>=#{sc.startPrice}
				 ]]>
			 </when>
			 <otherwise>
			 	<![CDATA[ 
					price>=#{sc.startPrice} and price<=#{sc.endPrice}
				 ]]>
			 </otherwise>
		</choose>	
		<if test='ad2 != null'>
			and ad1=#{ad1} and ad2=#{ad2}
		</if> 
			<if test='sc.popular != null'>
		    	order by rank desc
		    </if>
		    <if test='sc.latest != null'>
		    	order by f_create_date desc
		    </if>
		    <if test='sc.rate != null'>
				order by (rsum/decode(rcount,0,1,rcount)) desc
		    </if>
		    <if test='sc.highprice != null'>
		    	order by price desc
		    </if>
		    <if test='sc.lowprice != null'>
		    	order by price
		    </if>
	</select>
	
	<insert id="insertHeart">
		insert into heart
		values (SEQ_HEART.nextval, #{uid}, null, null, #{fno})
	</insert>
	
	<select id="readHeart" parameterType="map" resultType="_int">
		select count(*)
		from heart
		where user_id_ht=#{uid} and fno2=#{fno}
	</select>
	
	<delete id="deleteHeart" parameterType="map">
		delete from heart
		where user_id_ht=#{uid} and fno2=#{fno}
	</delete>
	
	<select id="selectFindList" resultType="Board">
		select *
		from board
		where (user_id like '%' || #{search} || '%'
		or ftitle like '%' || #{search} || '%'
		or small_title like '%' || #{search} || '%')
		and f_status = 'Y'
	</select>
	
	<select id="getFindListCount" resultType="_int">
		select count(*)
		from board
		where (user_id like '%' || #{search} || '%'
		or ftitle like '%' || #{search} || '%'
		or small_title like '%' || #{search} || '%')
		and f_status = 'Y'
	</select>
	
	<select id="selectwList" resultType="Board">
		select DISTINCT AD1, AD2
		from BLIST
		join choose using (fno)
        where to_date(ODEADLINE) > sysdate and category=#{cate}
	</select>
	
	<select id="makrLocation" resultType="Board">
		select *
		from board
	</select>
	
	<update id="plusHeart">
		update board
		set heart = heart + 1
		where fno=#{fno}
	</update>
	
	<update id="minusHeart">
		update board
		set heart = heart - 1
		where fno=#{fno}
	</update>
	
	<select id="selectMList" resultType="Board">
		<![CDATA[
		select *
		from (
			select rownum rnum, fno, ftype, price, small_title, ftitle, Round((rsum/rcount),1) as avgrv
			from board
			where rcount!=0 and rsum!=0 and f_status='Y' and ftype=1
			order by avgrv desc)
		where rnum<5
		]]>
	</select>
	
	<select id="selectCList" resultType="Board">
		<![CDATA[
		select *
		from (
			select rownum rnum, fno, ftype, price, small_title, ftitle, Round((rsum/rcount),1) as avgrv
			from board
			where rcount!=0 and rsum!=0 and f_status='Y' and ftype=2
			order by avgrv desc)
		where rnum<5
		]]>
	</select>
	
	<select id="selectUpMList" resultType="Board">
		<![CDATA[
		select *
		from (
			select rownum rnum, fno, ftype, price, small_title, ftitle, Round((rsum/rcount),1) as avgrv
			from board
			where rcount!=0 and rsum!=0 and f_status='Y' and ftype=1
			order by avgrv desc)
		where rnum<21
		]]>
	</select>
	
	<select id="selectUpCList" resultType="Board">
		<![CDATA[
		select *
		from (
			select rownum rnum, fno, ftype, price, small_title, ftitle, Round((rsum/rcount),1) as avgrv
			from board
			where rcount!=0 and rsum!=0 and f_status='Y' and ftype=2
			order by avgrv desc)
		where rnum<5
		]]>
	</select>
	
	<select id="selectHeartList" resultType="_int">
		select fno2
		from heart
		where user_id_ht = #{id}	
	</select>
	
	<select id="getFindFilterListCount" resultType="_int">
		select count(*)
		from blist
		where (ftitle like '%' || #{search} || '%'
		or small_title like '%' || #{search} || '%')
		and f_status = 'Y' and 
		<![CDATA[ 
			price>=#{sc.startPrice} and price<=#{sc.endPrice}
		 ]]>
		<if test='ad2 != null'>
			and ad1=#{ad1} and ad2=#{ad2} 
		</if> 
	</select>
	
	<select id="selectFindFilterList" parameterType="map" resultType="Board">
		select *
		from(select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hy' li
		     from blist
		     where fno in (select fno2
		                   from heart
		                   where user_id_ht=#{id})   
		    union
		    select FNO, FTYPE, PRICE, SMALL_TITLE, FTITLE, CATEGORY, LOCATION, AD1, AD2, F_CREATE_DATE, F_STATUS, RSUM, RCOUNT, RANK, RENAMEFILENAME, 'hn' li
		    from blist
		    where fno not in (select fno2
		                      from heart
		                      where user_id_ht=#{id}) )
		where (ftitle like '%' || #{search} || '%'
		or small_title like '%' || #{search} || '%')
		and f_status = 'Y' and
		<![CDATA[ 
			price>=#{sc.startPrice} and price<=#{sc.endPrice}
		 ]]>
		<if test='ad2 != null'>
			and ad1=#{ad1} and ad2=#{ad2}
		</if> 
			<if test='sc.popular != null'>
		    	order by rank desc
		    </if>
		    <if test='sc.latest != null'>
		    	order by f_create_date desc
		    </if>
		    <if test='sc.rate != null'>
				order by (rsum/decode(rcount,0,1,rcount)) desc
		    </if>
		    <if test='sc.highprice != null'>
		    	order by price desc
		    </if>
		    <if test='sc.lowprice != null'>
		    	order by price
		    </if>
	</select>
	
	<select id="selectwFindFilterList" resultType="Board">
		select DISTINCT AD1, AD2
		from BLIST
		where (ftitle like '%' || #{search} || '%'
		or small_title like '%' || #{search} || '%')
		and f_status = 'Y'
	</select>
	
	<select id="getClassListCount" resultType="_int">
		select count(*)
		from board
		where f_status = 'W' and (category ='diy' or category ='cook' or category='sport' or category='learn')
	</select>
	
	<select id="selectClassList" resultType="Board">
		select fno, ftitle, nickname, board.user_id
		from board, member
		where board.user_id = member.user_id
		and f_status = 'W' and (category ='diy' or category ='cook' or category='sport' or category='learn')
	</select>
	
	<update id="agreeClass">
		update board
		set f_status = 'Y'
		where fno = #{fno}
	</update>
	
	<update id="rejectClass">
		update board
		set f_status = 'R'
		where fno = #{fno}
	</update>
</mapper>
